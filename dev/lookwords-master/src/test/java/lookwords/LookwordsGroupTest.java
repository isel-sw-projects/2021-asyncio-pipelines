/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lookwords;

import lookwords.Benchmark.LookwordsGroupBench;
import org.junit.Test;

import java.util.Map.Entry;

import static org.junit.Assert.assertEquals;


public class LookwordsGroupTest {

    static final int MAX_SIZE = 10;
    static final int MIN_SIZE = 5;

    @Test public void testBlockingReaderInMultiThreadForFolderGuty() {
        long time  = System.currentTimeMillis();
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").blockingReaderInMultiThread();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBlockingReaderInMultiThreadForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").blockingReaderInMultiThread();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBlockingReaderInStreamsForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").blockingReaderInStreamsSequentially();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBlockingReaderInStreamsForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").blockingReaderInStreamsSequentially();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBodyPublisherInObservableForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").bodyPublisherInObservable();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBodyPublisherInObservableForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").bodyPublisherInObservable();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBodyPublisherInFuxForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").bodyPublisherInFlux();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBodyPublisherInFuxForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").bodyPublisherInFlux();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").rxIo();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").rxIo();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoInAsyncQueryForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").rxIoInAsyncQuery();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoInAsyncQueryForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").rxIoInAsyncQuery();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }
    
    @Test public void testRxIoForInFluxFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").reactorFlux();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoInFluxForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").reactorFlux();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoInObservableForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").rxIoInObservable();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testRxIoInObservableForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").rxIoInObservable();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }


    @Test public void testBaselineForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").groupWordsBaseLine();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test public void testBaselineForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").groupWordsBaseLine();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test
    public void testFlowForFolderGuty() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty").groupWordsWithFlow();
        assertEquals(38, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }

    @Test
    public void testFlowForFolderInner() {
        Entry<String, Integer> common = new LookwordsGroupBench(MIN_SIZE, MAX_SIZE, "guty/inner").groupWordsWithFlow();
        assertEquals(29, common.getValue().intValue());
        assertEquals("little", common.getKey());
    }
}
